--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -487,6 +487,13 @@
 			     u32 prohibited_flags);
 
 /**
+ * cfg80211_chandef_dfs_available - checks if radar channel is available
+ * returns: true available, false not available.
+ */
+bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
+			const struct cfg80211_chan_def *chandef);
+
+/**
  * cfg80211_chandef_dfs_required - checks if radar detection is required
  * @wiphy: the wiphy to validate against
  * @chandef: the channel definition to check
--- a/net/mac80211/chan.c
+++ b/net/mac80211/chan.c
@@ -1601,7 +1601,10 @@
 	ieee80211_recalc_smps_chanctx(local, ctx);
 	ieee80211_recalc_radar_chanctx(local, ctx);
  out:
-	if (ret)
+	/* we call cfg80211_chandef_dfs_available here to set radar_required false
+	 * when chandef is available, or we can't scan on radar channel.
+	 */
+	if (ret || cfg80211_chandef_dfs_available(local->hw.wiphy, chandef))
 		sdata->radar_required = false;
 
 	mutex_unlock(&local->chanctx_mtx);
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -487,7 +487,7 @@
 	return true;
 }
 
-static bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
+bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
 				const struct cfg80211_chan_def *chandef)
 {
 	int width;
@@ -520,6 +520,7 @@
 
 	return r;
 }
+EXPORT_SYMBOL(cfg80211_chandef_dfs_available);
 
 static unsigned int cfg80211_get_chans_dfs_cac_time(struct wiphy *wiphy,
 						    u32 center_freq,
